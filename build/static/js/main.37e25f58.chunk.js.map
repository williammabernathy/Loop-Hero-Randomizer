{"version":3,"sources":["assets sync /^/.*/.webp$","assets/Ancestral Crypt.webp","assets/Arsenal.webp","assets/Battlefield.webp","assets/Beacon.webp","assets/Blood Grove.webp","assets/Bookery.webp","assets/Cemetery.webp","assets/Chrono Crystals.webp","assets/Desert.webp","assets/Forest.webp","assets/Grove.webp","assets/Maze Of Memories.webp","assets/Meadow.webp","assets/Mountain.webp","assets/Necromancer.webp","assets/Oblivion.webp","assets/Outpost.webp","assets/River.webp","assets/Road Lantern.webp","assets/Rock.webp","assets/Rogue.webp","assets/Ruins.webp","assets/Sand Dunes.webp","assets/Smith Forge.webp","assets/Spider Cocoon.webp","assets/Storm Temple.webp","assets/Suburbs.webp","assets/Swamp.webp","assets/Temporal Beacon.webp","assets/Thicket.webp","assets/Treasury.webp","assets/Vampire Mansion.webp","assets/Village.webp","assets/Warrior.webp","assets/Wheat Fields.webp","assets/Zero Milestone.webp","assets/undefined.webp","constants/constants.js","App.js","reportWebVitals.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","tileType","placeholderDeck","roadCards","name","roadsideCards","landscapeCards","specialCards","goldCards","classChoice","totalCards","slice","randomizeCards","roadTotal","roadsideTotal","landscapeTotal","specialTotal","cardTotalSum","Math","floor","random","ceil","i","allCards","allCardTotals","resultingCards","length","j","randomCard","undefined","indexOf","push","splice","randomizeChapter","App","useState","randomizedDeck","setRandomizedDeck","randomizedChapter","setRandomizedChapter","pageFont","setPageFont","pictures","useEffect","console","log","forEach","image","Image","src","require","default","className","style","fontFamily","value","onChange","event","target","onClick","card","index","alt","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37e25f58.chunk.js","sourcesContent":["var map = {\n\t\"./Ancestral Crypt.webp\": 13,\n\t\"./Arsenal.webp\": 14,\n\t\"./Battlefield.webp\": 15,\n\t\"./Beacon.webp\": 16,\n\t\"./Blood Grove.webp\": 17,\n\t\"./Bookery.webp\": 18,\n\t\"./Cemetery.webp\": 19,\n\t\"./Chrono Crystals.webp\": 20,\n\t\"./Desert.webp\": 21,\n\t\"./Forest.webp\": 22,\n\t\"./Grove.webp\": 23,\n\t\"./Maze Of Memories.webp\": 24,\n\t\"./Meadow.webp\": 25,\n\t\"./Mountain.webp\": 26,\n\t\"./Necromancer.webp\": 27,\n\t\"./Oblivion.webp\": 28,\n\t\"./Outpost.webp\": 29,\n\t\"./River.webp\": 30,\n\t\"./Road Lantern.webp\": 31,\n\t\"./Rock.webp\": 32,\n\t\"./Rogue.webp\": 33,\n\t\"./Ruins.webp\": 34,\n\t\"./Sand Dunes.webp\": 35,\n\t\"./Smith Forge.webp\": 36,\n\t\"./Spider Cocoon.webp\": 37,\n\t\"./Storm Temple.webp\": 38,\n\t\"./Suburbs.webp\": 39,\n\t\"./Swamp.webp\": 40,\n\t\"./Temporal Beacon.webp\": 41,\n\t\"./Thicket.webp\": 42,\n\t\"./Treasury.webp\": 43,\n\t\"./Vampire Mansion.webp\": 44,\n\t\"./Village.webp\": 45,\n\t\"./Warrior.webp\": 46,\n\t\"./Wheat Fields.webp\": 47,\n\t\"./Zero Milestone.webp\": 48,\n\t\"./undefined.webp\": 49\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2;","export default __webpack_public_path__ + \"static/media/Ancestral Crypt.34b9918a.webp\";","export default __webpack_public_path__ + \"static/media/Arsenal.394c8d41.webp\";","export default __webpack_public_path__ + \"static/media/Battlefield.a7bcbd8d.webp\";","export default __webpack_public_path__ + \"static/media/Beacon.1c45b68e.webp\";","export default __webpack_public_path__ + \"static/media/Blood Grove.e03a54db.webp\";","export default __webpack_public_path__ + \"static/media/Bookery.ffab190f.webp\";","export default __webpack_public_path__ + \"static/media/Cemetery.1101ff15.webp\";","export default __webpack_public_path__ + \"static/media/Chrono Crystals.642f2718.webp\";","export default __webpack_public_path__ + \"static/media/Desert.426ce84d.webp\";","export default __webpack_public_path__ + \"static/media/Forest.feb00015.webp\";","export default __webpack_public_path__ + \"static/media/Grove.6ec7fea7.webp\";","export default __webpack_public_path__ + \"static/media/Maze Of Memories.1ae5f35c.webp\";","export default __webpack_public_path__ + \"static/media/Meadow.d835cb14.webp\";","export default __webpack_public_path__ + \"static/media/Mountain.a1967ec7.webp\";","export default __webpack_public_path__ + \"static/media/Necromancer.1a41e623.webp\";","export default __webpack_public_path__ + \"static/media/Oblivion.93cc035c.webp\";","export default __webpack_public_path__ + \"static/media/Outpost.58cee122.webp\";","export default __webpack_public_path__ + \"static/media/River.dfc1c3b3.webp\";","export default __webpack_public_path__ + \"static/media/Road Lantern.8f718a86.webp\";","export default __webpack_public_path__ + \"static/media/Rock.fc86a3dc.webp\";","export default __webpack_public_path__ + \"static/media/Rogue.48314b3c.webp\";","export default __webpack_public_path__ + \"static/media/Ruins.194a8617.webp\";","export default __webpack_public_path__ + \"static/media/Sand Dunes.cf6d7ae3.webp\";","export default __webpack_public_path__ + \"static/media/Smith Forge.7143d17f.webp\";","export default __webpack_public_path__ + \"static/media/Spider Cocoon.5d1d1dd9.webp\";","export default __webpack_public_path__ + \"static/media/Storm Temple.84627e2a.webp\";","export default __webpack_public_path__ + \"static/media/Suburbs.b00b37bc.webp\";","export default __webpack_public_path__ + \"static/media/Swamp.53da5114.webp\";","export default __webpack_public_path__ + \"static/media/Temporal Beacon.281cecef.webp\";","export default __webpack_public_path__ + \"static/media/Thicket.edaab4cc.webp\";","export default __webpack_public_path__ + \"static/media/Treasury.e24a1f0e.webp\";","export default __webpack_public_path__ + \"static/media/Vampire Mansion.67a5fe24.webp\";","export default __webpack_public_path__ + \"static/media/Village.ae21586d.webp\";","export default __webpack_public_path__ + \"static/media/Warrior.fe5bfe0f.webp\";","export default __webpack_public_path__ + \"static/media/Wheat Fields.127510c0.webp\";","export default __webpack_public_path__ + \"static/media/Zero Milestone.790a1617.webp\";","export default __webpack_public_path__ + \"static/media/undefined.a6b551fb.webp\";","export const tileType = [\r\n  \"Road\",\r\n  \"Roadside\",\r\n  \"Landscape\",\r\n  \"Special\",\r\n  \"Golden\",\r\n  \"Class\",\r\n];\r\n\r\nexport const minTotalCards = 7;\r\nexport const maxTotalCards = 15;\r\n\r\nexport const placeholderDeck = [\r\n  [],\r\n  [],\r\n  [],\r\n  [],\r\n  [],\r\n  [],\r\n  [\"00\"],\r\n  [\"00\"],\r\n  [\"00\"],\r\n  [\"00\"],\r\n  [\"00\"],\r\n];\r\n\r\nexport const roadCards = [\r\n  \"Cemetery\",\r\n  \"Village\",\r\n  \"Grove\",\r\n  \"Wheat Fields\",\r\n  \"Swamp\",\r\n  \"Ruins\",\r\n];\r\nroadCards.name = \"Road\";\r\nexport const roadsideCards = [\r\n  \"Spider Cocoon\",\r\n  \"Vampire Mansion\",\r\n  \"Battlefield\",\r\n  \"Blood Grove\",\r\n  \"Bookery\",\r\n  \"Road Lantern\",\r\n  \"Smith Forge\",\r\n  \"Chrono Crystals\",\r\n  \"Outpost\",\r\n];\r\nroadsideCards.name = \"Roadside\";\r\nexport const landscapeCards = [\r\n  \"Mountain\",\r\n  \"Thicket\",\r\n  \"River\",\r\n  \"Sand Dunes\",\r\n  \"Meadow\",\r\n  \"Suburbs\",\r\n];\r\nlandscapeCards.name = \"Landscape\";\r\nexport const specialCards = [\r\n  \"Oblivion\",\r\n  \"Beacon\",\r\n  \"Storm Temple\",\r\n  \"Temporal Beacon\",\r\n  \"Treasury\",\r\n];\r\nspecialCards.name = \"Special\";\r\nexport const goldCards = [\r\n  \"Ancestral Crypt\",\r\n  \"Zero Milestone\",\r\n  \"Maze Of Memories\",\r\n  \"Arsenal\",\r\n];\r\ngoldCards.name = \"Gold\";\r\nexport const classChoice = [\"Warrior\", \"Rogue\", \"Necromancer\"];\r\nclassChoice.name = \"Class\";\r\n\r\nexport const totalCards = [\r\n  roadCards.slice(),\r\n  roadsideCards.slice(),\r\n  landscapeCards.slice(),\r\n  specialCards.slice(),\r\n  goldCards.slice(),\r\n  classChoice.slice(),\r\n];\r\n","/* eslint-disable no-lone-blocks */\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  tileType,\n  minTotalCards,\n  maxTotalCards,\n  placeholderDeck,\n  roadCards,\n  roadsideCards,\n  landscapeCards,\n  specialCards,\n  goldCards,\n  classChoice,\n  totalCards,\n} from \"./constants/constants\";\n\n// randomize the deck\nconst randomizeCards = () => {\n  //e.preventDefault();\n\n  // loop to ensure constraints of 15 max and 7 min cards are met\n  let roadTotal,\n    roadsideTotal,\n    landscapeTotal,\n    specialTotal,\n    goldTotal,\n    classTotal,\n    cardTotalSum;\n  do {\n    // get the amount of cards for each \"sleeve\"\n    // this is per the actual documentation.....\n    roadTotal = Math.floor(\n      Math.random() * (Math.floor(6) - Math.ceil(2) + 1) + Math.ceil(2)\n    );\n    roadsideTotal = Math.floor(\n      Math.random() * (Math.floor(9) - Math.ceil(2) + 1) + Math.ceil(2)\n    );\n    landscapeTotal = Math.floor(\n      Math.random() * (Math.floor(6) - Math.ceil(2) + 1) + Math.ceil(2)\n    );\n    specialTotal = Math.floor(\n      Math.random() * (Math.floor(5) - Math.ceil(1) + 1) + Math.ceil(1)\n    );\n\n    cardTotalSum = roadTotal + roadsideTotal + landscapeTotal + specialTotal;\n  } while (cardTotalSum > maxTotalCards || cardTotalSum < minTotalCards);\n\n  goldTotal = 1;\n  classTotal = 1;\n\n  // temp arrays to restore values after generating deck\n  let roadCardsTemp = roadCards.slice();\n  let roadsideCardsTemp = roadsideCards.slice();\n  let landscapeCardsTemp = landscapeCards.slice();\n  let specialCardsTemp = specialCards.slice();\n  let goldCardsTemp = goldCards.slice();\n  let classChoiceTemp = classChoice.slice();\n\n  // set up array of arrays containing generated totals and all card values\n  let allCards = [\n    roadCardsTemp,\n    roadsideCardsTemp,\n    landscapeCardsTemp,\n    specialCardsTemp,\n    goldCardsTemp,\n    classChoiceTemp,\n  ];\n  let allCardTotals = [\n    roadTotal,\n    roadsideTotal,\n    landscapeTotal,\n    specialTotal,\n    goldTotal,\n    classTotal,\n  ];\n\n  // prepare array of arrays to populate and return\n  let roadResults = [];\n  let roadsideResults = [];\n  let landscapeResults = [];\n  let specialResults = [];\n  let goldResults = [];\n  let classResults = [];\n\n  // empty 2d array to return for state change\n  let resultingCards = [\n    roadResults,\n    roadsideResults,\n    landscapeResults,\n    specialResults,\n    goldResults,\n    classResults,\n    cardTotalSum,\n  ];\n\n  // populate randomized deck given generated data\n  var i;\n  for (i = 0; i < allCards.length; i++) {\n    var j;\n    var randomCard;\n    for (j = 0; j < allCardTotals[i]; j++) {\n      // generate random number from 0 to size of array\n      randomCard = Math.floor(\n        Math.random() * (Math.floor(allCards[i].length) - Math.ceil(0)) +\n          Math.ceil(0)\n      );\n\n      if (allCards[i][randomCard] === undefined) {\n        continue;\n      } else {\n        // check if wheat field was selected and then add village if it hasn't been added yet\n        if (allCards[i][randomCard] === \"Wheat Fields\") {\n          if (allCards[0].indexOf(\"Village\") > -1 && resultingCards[6] < 14) {\n            resultingCards[0].push(\"Village\");\n            resultingCards[0].push(allCards[i][randomCard]);\n            allCards[0].splice(randomCard, 1);\n            allCards[0].splice(allCards[i].indexOf(\"Village\"), 1);\n            resultingCards[6]++;\n          } else if (resultingCards[i].indexOf(\"Village\") > -1) {\n            resultingCards[i].push(allCards[i][randomCard]);\n            allCards[i].splice(randomCard, 1);\n          } else {\n            // skip wheat field\n            j--;\n            allCards[0].splice(allCards[i].indexOf(\"Wheat Fields\"), 1);\n          }\n        }\n        // check if blood grove was selected and if conditions to select it are met\n        else if (allCards[i][randomCard] === \"Blood Grove\") {\n          // check if blood grove will be paired with grove\n          if (\n            resultingCards[0].indexOf(\"Grove\") > -1 &&\n            resultingCards[6] < 15\n          ) {\n            resultingCards[1].push(allCards[1][randomCard]);\n            allCards[1].splice(randomCard, 1);\n          } else {\n            // skip blood grove\n            j--;\n            allCards[1].splice(allCards[1].indexOf(\"Blood Grove\"), 1);\n          }\n        } else {\n          // add randomly selected card to array of arrays containing all selected cards\n          resultingCards[i].push(allCards[i][randomCard]);\n\n          // remove randomly selected card(s) to avoid duplicates\n          allCards[i].splice(randomCard, 1);\n        }\n      }\n    }\n  }\n\n  resultingCards[6] =\n    resultingCards[0].length +\n    resultingCards[1].length +\n    resultingCards[2].length +\n    resultingCards[3].length;\n\n  // set the randomized deck as state\n  return resultingCards;\n};\n\n// randomize the chapter from 1-4\nconst randomizeChapter = () => {\n  let randomChapter = Math.floor(\n    Math.random() * (Math.floor(4) - Math.ceil(1) + 1) + Math.ceil(1)\n  );\n\n  return randomChapter;\n};\n\n{\n  /* \n  Main Component\n*/\n}\nconst App = () => {\n  // states used through app\n  // our randomized deck, the randomized chapter and the page font\n  const [randomizedDeck, setRandomizedDeck] = useState(placeholderDeck);\n  const [randomizedChapter, setRandomizedChapter] = useState(0);\n  const [pageFont, setPageFont] = useState(\"ARCADECLASSIC\");\n  // eslint-disable-next-line no-unused-vars\n  const [pictures, setPictures] = useState(totalCards);\n\n  useEffect(() => {\n    console.log(randomizedDeck);\n    var i;\n    for (i = 0; i < pictures.length; i++) {\n      pictures[i].forEach((image) => {\n        new Image().src = require(`./assets/${image}.webp`).default;\n      });\n\n      /*var j;\n      for (j = 0; j < pictures[i].length; j++) {\n        \n      }*/\n    }\n  }, [pictures, randomizedDeck]);\n\n  // update the page font using event handler\n  const changeFont = (event) => {\n    setPageFont(event.target.value);\n  };\n\n  return (\n    <div className=\"App\" style={{ fontFamily: pageFont }}>\n      <h1 className=\"title\">Loop Hero Randomizer</h1>\n\n      <div>\n        <select\n          className=\"fontSelect\"\n          value={pageFont}\n          onChange={changeFont}\n          style={{ fontFamily: pageFont }}\n        >\n          <option value=\"ARCADECLASSIC\">Retro</option>\n          <option value=\"roboto\">Simple</option>\n          <option value=\"dyslex\">Dyslexic</option>\n        </select>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>\n              <h2 className=\"cardsColumnsTitle\">Cards</h2>\n              <button\n                className=\"randomizeButton\"\n                style={{ fontFamily: pageFont }}\n                onClick={() => setRandomizedDeck(randomizeCards)}\n              >\n                Randomize\n              </button>\n            </th>\n          </tr>\n\n          <tr>\n            <td className=\"cardsColumns\">\n              <h2>Total Cards: [{randomizedDeck[6]}]</h2>\n              <h2>\n                {tileType[0]} [{randomizedDeck[0].length}]\n              </h2>\n              {randomizedDeck[0].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n\n              <h2>\n                {tileType[1]} [{randomizedDeck[1].length}]\n              </h2>\n              {randomizedDeck[1].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n\n              <h2>\n                {tileType[2]} [{randomizedDeck[2].length}]\n              </h2>\n              {randomizedDeck[2].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n\n              <h2>\n                {tileType[3]} [{randomizedDeck[3].length}]\n              </h2>\n              {randomizedDeck[3].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n\n              <h2>{tileType[4]}</h2>\n              {randomizedDeck[4].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n\n              <h2>{tileType[5]}</h2>\n              {randomizedDeck[5].map((card, index) => (\n                <img\n                  className=\"cardImage\"\n                  key={index}\n                  src={require(`./assets/${card}.webp`).default}\n                  alt={card}\n                />\n              ))}\n            </td>\n          </tr>\n          <tr>\n            <th>\n              <h2 className=\"otherColumnTitle\">Other</h2>\n            </th>\n          </tr>\n          <tr>\n            <td className=\"otherColumn\">\n              <button\n                className=\"randomizeButton\"\n                style={{ fontFamily: pageFont }}\n                onClick={() => setRandomizedChapter(randomizeChapter)}\n              >\n                Randomize\n              </button>\n              <h2>Chapter : [{randomizedChapter}]</h2>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <footer className=\"simpleFooter\">\n        Code at:{\" \"}\n        <a href=\"https://github.com/williammabernathy/Loop-Hero-Randomizer\">\n          {\" \"}\n          https://github.com/williammabernathy/Loop-Hero-Randomizer{\" \"}\n        </a>\n      </footer>\n\n      {/*\n      The start of making it \"pretty\"\n      <ul>\n        {tileType.map((item, index) => \n          <li>\n            <DeckSleeve key={index} \n              tileType={item}\n            />\n          </li>\n          )\n        }\n      </ul>\n      */}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reload on changes\nif (module.hot) {\n  module.hot.accept()\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}