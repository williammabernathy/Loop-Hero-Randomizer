{"version":3,"sources":["constants/constants.js","App.js","reportWebVitals.js","index.js"],"names":["tileType","placeholderDeck","roadCards","name","roadsideCards","landscapeCards","specialCards","goldCards","classChoice","randomizeCards","roadTotal","roadsideTotal","landscapeTotal","specialTotal","cardTotalSum","Math","floor","random","ceil","i","allCards","slice","allCardTotals","resultingCards","length","j","randomCard","indexOf","push","splice","randomizeChapter","App","useState","randomizedDeck","setRandomizedDeck","randomizedChapter","setRandomizedChapter","pageFont","setPageFont","className","style","fontFamily","value","onChange","event","target","onClick","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b676ea7.chunk.js","sourcesContent":["export const tileType = [\"Road\", \"Roadside\", \"Landscape\", \"Special\", \"Golden\", \"Class\"];\r\n\r\nexport const minTotalCards = 7;\r\nexport const maxTotalCards = 15;\r\n\r\nexport const placeholderDeck = [[], [], [], [], [], [], ['00'], ['00'], ['00'], ['00'], ['00']];\r\n\r\nexport const roadCards = [\"Cemetary\", \"Village\", \"Grove\", \"Wheat Fields\", \"Swamps\", \"Ruins\"];\r\nroadCards.name = \"Road\";\r\nexport const roadsideCards = [\"Spider Cocoon\", \"Vampire's Mansion\", \"Battle Field\", \"Blood Grove\", \"Bookery\", \"Road Lantern\", \"Smith's Forge\", \"Chrono Crystals\", \"Outpost\"];\r\nroadsideCards.name = \"Roadside\";\r\nexport const landscapeCards = [\"Rock/Mountain\", \"Forest/Thicket\", \"River\", \"Desert/Sand Dunes\", \"Meadow\", \"Suburbs\"];\r\nlandscapeCards.name = \"Landscape\";\r\nexport const specialCards = [\"Oblivion\", \"Beacon\", \"Storm Temple\", \"Temporal Beacon\", \"Treasury\"];\r\nspecialCards.name = \"Special\";\r\nexport const goldCards = [\"Ancestral Crypt\", \"Zero Milestone\", \"Maze of Memories\", \"Arsenal\"];\r\ngoldCards.name = \"Gold\";\r\nexport const classChoice = [\"Warrior\", \"Rogue\", \"Necromancer\"];\r\nclassChoice.name = \"Class\"","/* eslint-disable no-lone-blocks */\nimport { useState } from \"react\";\nimport './App.css';\nimport { tileType, minTotalCards, maxTotalCards, placeholderDeck, roadCards, roadsideCards, landscapeCards, specialCards, goldCards, classChoice } from './constants/constants';\n//import DeckSleeve from './Components/DeckSleeve/DeckSleeve';\n\n// randomize the deck\nconst randomizeCards = () => {\n  //e.preventDefault();\n\n  // loop to ensure constraints of 15 max and 7 min cards are met\n  let roadTotal, roadsideTotal, landscapeTotal, specialTotal, goldTotal, classTotal, cardTotalSum;\n  do {\n    // get the amount of cards for each \"sleeve\"\n    // this is per the actual documentation.....\n    roadTotal = Math.floor(Math.random() * (Math.floor(6) - Math.ceil(2) + 1) + Math.ceil(2));\n    roadsideTotal = Math.floor(Math.random() * (Math.floor(9) - Math.ceil(2) + 1) + Math.ceil(2));\n    landscapeTotal = Math.floor(Math.random() * (Math.floor(5) - Math.ceil(2) + 1) + Math.ceil(2));\n    specialTotal = Math.floor(Math.random() * (Math.floor(4) - Math.ceil(1) + 1) + Math.ceil(1));\n\n    cardTotalSum = roadTotal + roadsideTotal + landscapeTotal + specialTotal;\n  } while (cardTotalSum > maxTotalCards || cardTotalSum < minTotalCards)\n\n  goldTotal = 1;\n  classTotal = 1;\n\n  // temp arrays to restore values after generating deck\n  let roadCardsTemp = roadCards.slice();\n  let roadsideCardsTemp = roadsideCards.slice();\n  let landscapeCardsTemp = landscapeCards.slice();\n  let specialCardsTemp = specialCards.slice();\n  let goldCardsTemp = goldCards.slice();\n  let classChoiceTemp = classChoice.slice();\n\n  // set up array of arrays containing generated totals and all card values\n  let allCards = [roadCardsTemp, roadsideCardsTemp, landscapeCardsTemp, specialCardsTemp, goldCardsTemp, classChoiceTemp];\n  let allCardTotals = [roadTotal, roadsideTotal, landscapeTotal, specialTotal, goldTotal, classTotal];\n\n  // prepare array of arrays to populate and return\n  let roadResults = [];\n  let roadsideResults = [];\n  let landscapeResults = [];\n  let specialResults = [];\n  let goldResults = [];\n  let classResults = [];\n\n  // empty 2d array to return for state change\n  let resultingCards = [roadResults, roadsideResults, landscapeResults, specialResults, goldResults, classResults,\n    cardTotalSum];\n\n  // populate randomized deck given generated data\n  var i;\n  for (i = 0; i < allCards.length; i++) {\n    var j;\n    var randomCard;\n    for (j = 0; j < allCardTotals[i]; j++) {\n      // generate random number from 0 to size of array\n      randomCard = Math.floor(Math.random() * (Math.floor(allCards[i].length) - Math.ceil(0)) + Math.ceil(0));\n\n      // check if wheat field was selected and then add village if it hasn't been added yet\n      if (allCards[i][randomCard] === \"Wheat Fields\") {\n        if (allCards[0].indexOf(\"Village\") > -1 && cardTotalSum < 14) {\n          resultingCards[0].push(\"Village\");\n          resultingCards[0].push(allCards[i][randomCard]);\n          allCards[0].splice(randomCard, 1);\n          allCards[0].splice(allCards[i].indexOf(\"Village\"), 1);\n        }\n        else if (cardTotalSum > 13) {\n          // skip wheat field, too many cards for wheat fields AND village\n          continue;\n        }\n        else {\n          resultingCards[0].push(allCards[i][randomCard]);\n          allCards[0].splice(randomCard, 1);\n        }\n      }\n      // check if blood grove was selected and if conditions to select it are met\n      else if (allCards[i][randomCard] === \"Blood Grove\") {\n        // check if blood grove will be paired with grove\n        if (resultingCards[0].indexOf(\"Grove\") > -1) {\n          resultingCards[1].push(allCards[1][randomCard]);\n          allCards[1].splice(randomCard, 1);\n        }\n        else {\n          // skip blood grove\n          continue;\n        }\n      }\n      else {\n        // add randomly selected card to array of arrays containing all selected cards\n        resultingCards[i].push(allCards[i][randomCard]);\n\n        // remove randomly selected card(s) to avoid duplicates\n        allCards[i].splice(randomCard, 1);\n      }\n\n      // catches to ensure roads and roadsides don't break upper and lower limits\n      if (i === 0 && resultingCards[0].length < 2) {\n        j--;\n      }\n      else if (i === 0 && resultingCards[0].length === 6) {\n        break;\n      }\n\n      if (i === 1 && resultingCards[1].length < 2) {\n        j--;\n      }\n      else if (i === 1 && resultingCards[1].length === 9) {\n        break;\n      }\n\n    }\n\n  }\n\n  resultingCards[6] = resultingCards[0].length + resultingCards[1].length + resultingCards[2].length + resultingCards[3].length;\n\n  // set the randomized deck as state\n  //console.log(resultingCards);\n  return resultingCards;\n}\n\n// randomize the chapter from 1-4\nconst randomizeChapter = () => {\n  let randomChapter = Math.floor(Math.random() * (Math.floor(4) - Math.ceil(1) + 1) + Math.ceil(1));\n\n  return randomChapter;\n}\n\n{/* \n  Main Component\n*/}\nconst App = () => {\n\n  // states used through app\n  // our randomized deck, the randomized chapter and the page font\n  const [randomizedDeck, setRandomizedDeck] = useState(placeholderDeck);\n  const [randomizedChapter, setRandomizedChapter] = useState(0);\n  const [pageFont, setPageFont] = useState('ARCADECLASSIC');\n\n  // update the page font using event handler\n  const changeFont = (event) => {\n    setPageFont(event.target.value);\n  }\n\n  return (\n    <div className=\"App\" style={{ fontFamily: pageFont }}>\n      <h1 className=\"title\">Loop Hero Randomizer</h1>\n\n      <div>\n        <select className=\"fontSelect\" value={pageFont} onChange={changeFont} style={{ fontFamily: pageFont }}>\n          <option value=\"ARCADECLASSIC\">Retro</option>\n          <option value=\"roboto\">Simple</option>\n          <option value=\"dyslex\">Dyslexic</option>\n        </select>\n      </div>\n\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>\n              <h2 className=\"cardsColumnsTitle\">Cards</h2>\n            </th>\n            <th>\n              <h2 className=\"otherColumnTitle\">Other</h2>\n            </th>\n          </tr>\n          <tr>\n            <td className=\"cardsColumns\">\n              <button className=\"randomizeButton\" style={{ fontFamily: pageFont }} onClick={() => setRandomizedDeck(randomizeCards)}>Randomize</button>\n              <h2>Total Cards: [{randomizedDeck[6]}]</h2>\n              <h2>{tileType[0]} [{randomizedDeck[0].length}]</h2>\n              {randomizedDeck[0].join(' | ')}\n\n              <h2>{tileType[1]} [{randomizedDeck[1].length}]</h2>\n              {randomizedDeck[1].join(' | ')}\n\n              <h2>{tileType[2]} [{randomizedDeck[2].length}]</h2>\n              {randomizedDeck[2].join(' | ')}\n\n              <h2>{tileType[3]} [{randomizedDeck[3].length}]</h2>\n              {randomizedDeck[3].join(' | ')}\n\n              <h2>{tileType[4]}</h2>\n              {randomizedDeck[4].join(' | ')}\n\n              <h2>{tileType[5]}</h2>\n              {randomizedDeck[5].join(' | ')}\n            </td>\n            <td className=\"otherColumn\">\n              <button className=\"randomizeButton\" style={{ fontFamily: pageFont }} onClick={() => setRandomizedChapter(randomizeChapter)}>Randomize</button>\n              <h2>Chapter : [{randomizedChapter}]</h2>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      {/*\n      The start of making it \"pretty\"\n      <ul>\n        {tileType.map((item, index) => \n          <li>\n            <DeckSleeve key={index} \n              tileType={item}\n            />\n          </li>\n          )\n        }\n      </ul>\n      */}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// reload on changes\nif (module.hot) {\n  module.hot.accept()\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}